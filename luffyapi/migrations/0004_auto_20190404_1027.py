# Generated by Django 2.1.7 on 2019-04-04 02:27

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('luffyapi', '0003_auto_20190225_1528'),
    ]

    operations = [
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='回答')),
                ('agree_number', models.IntegerField(default=0, verbose_name='点赞数')),
                ('disagree_number', models.IntegerField(default=0, verbose_name='点踩数')),
                ('answer_date', models.DateTimeField(auto_now=True, verbose_name='日期')),
            ],
            options={
                'verbose_name_plural': '800000003. 讨论区：解答',
            },
        ),
        migrations.CreateModel(
            name='AnswerComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField(max_length=512, verbose_name='评论内容')),
                ('attachment_path', models.CharField(blank=True, help_text='跟进记录的截图等', max_length=128, null=True, verbose_name='附件路径')),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': '800000004. 讨论区：评论',
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.IntegerField(unique=True, verbose_name='城市码')),
                ('name', models.CharField(max_length=64, verbose_name='城市名')),
            ],
            options={
                'verbose_name_plural': '205. 城市表',
            },
        ),
        migrations.CreateModel(
            name='Coupon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='优惠券名')),
                ('brief', models.TextField(blank=True, null=True, verbose_name='优惠券介绍')),
                ('coupon_type', models.SmallIntegerField(choices=[(0, '通用券'), (1, '折扣券'), (2, '满减券')], verbose_name='券类型')),
                ('money_equivalent_value', models.IntegerField(blank=True, null=True, verbose_name='等值货币')),
                ('off_percent', models.PositiveIntegerField(blank=True, help_text='只针对折扣券，例7.9折，写79', null=True, verbose_name='折扣百分比')),
                ('minimum_consume', models.PositiveIntegerField(default=0, help_text='仅在满减券时填写此字段', verbose_name='最低消费')),
                ('object_id', models.PositiveIntegerField(blank=True, help_text='通用卷不用绑定课程', null=True, verbose_name='课程id')),
                ('quantity', models.PositiveIntegerField(default=1, verbose_name='优惠券数量')),
                ('open_date', models.DateField(verbose_name='优惠券领取开始时间')),
                ('close_date', models.DateField(verbose_name='优惠券领取结束时间')),
                ('valid_begin_date', models.DateField(blank=True, null=True, verbose_name='有效期开始时间')),
                ('valid_end_date', models.DateField(blank=True, null=True, verbose_name='有效期结束时间')),
                ('coupon_valid_days', models.PositiveIntegerField(blank=True, help_text='自从券被领取时开始算起', null=True, verbose_name='优惠卷有效期(天)')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='创建日期')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', verbose_name='课程类型')),
            ],
            options={
                'verbose_name_plural': '500001. 优惠卷类型',
            },
        ),
        migrations.CreateModel(
            name='CouponRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coupon_number', models.CharField(max_length=64, unique=True, verbose_name='优惠卷编号')),
                ('status', models.SmallIntegerField(choices=[(0, '未使用'), (1, '已使用'), (2, '已过期')], default=0, verbose_name='优惠卷状态')),
                ('get_time', models.DateTimeField(help_text='用户领取时间', verbose_name='领取时间')),
                ('used_time', models.DateTimeField(blank=True, null=True, verbose_name='使用时间')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='luffyapi.UserInfo', verbose_name='所属账户')),
                ('coupon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='luffyapi.Coupon', verbose_name='优惠券类型')),
            ],
            options={
                'verbose_name_plural': '500002. 优惠卷记录',
            },
        ),
        migrations.CreateModel(
            name='CourseSchedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recommend_date', models.DateField(verbose_name='推荐交作业日期')),
                ('homework', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='luffyapi.HomeWork')),
            ],
            options={
                'verbose_name_plural': '15. 课程模块计划表（学位课）',
            },
        ),
        migrations.CreateModel(
            name='DegreeRegistrationForm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_company', models.CharField(max_length=64)),
                ('current_position', models.CharField(max_length=64)),
                ('current_salary', models.IntegerField()),
                ('work_experience', models.IntegerField()),
                ('open_module', models.BooleanField(default=True, verbose_name='是否开通第1模块')),
                ('stu_specified_mentor', models.CharField(blank=True, max_length=32, null=True, verbose_name='学员自行指定的导师名')),
                ('study_plan', models.SmallIntegerField(choices=[(0, '1-2小时/天'), (1, '2-3小时/天'), (2, '3-5小时/天'), (3, '5小时+/天')], default=1)),
                ('why_take_this_course', models.TextField(max_length=1024, verbose_name='报此课程原因')),
                ('why_choose_us', models.TextField(max_length=1024, verbose_name='为何选路飞')),
                ('your_expectation', models.TextField(max_length=1024, verbose_name='你的期待')),
                ('memo', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name_plural': '18. 报名表（学位课）',
            },
        ),
        migrations.CreateModel(
            name='EnrolledCourse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrolled_date', models.DateTimeField(auto_now_add=True)),
                ('valid_begin_date', models.DateField(verbose_name='有效期开始自')),
                ('valid_end_date', models.DateField(verbose_name='有效期结束至')),
                ('status', models.SmallIntegerField(choices=[(0, '已开通'), (1, '已过期')], default=0)),
            ],
            options={
                'verbose_name_plural': '19. 报名专题课',
            },
        ),
        migrations.CreateModel(
            name='EnrolledDegreeCourse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrolled_date', models.DateTimeField(auto_now_add=True)),
                ('valid_begin_date', models.DateField(blank=True, null=True, verbose_name='有效期开始自')),
                ('valid_end_date', models.DateField(blank=True, null=True, verbose_name='有效期结束至')),
                ('study_status', models.SmallIntegerField(choices=[(0, '在学中'), (1, '休学中'), (2, '已毕业'), (3, '超时结业'), (4, '未开始')], default=0)),
                ('mentor_fee_balance', models.PositiveIntegerField(help_text='这个学员的导师费用，每有惩罚，需在此字段同时扣除', verbose_name='导师费用余额')),
            ],
            options={
                'verbose_name_plural': '17. 报名学位课',
            },
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=32, null=True, verbose_name='标题')),
                ('contact', models.CharField(blank=True, max_length=64, null=True, verbose_name='联系方式')),
                ('feedback_type', models.SmallIntegerField(choices=[(0, '网站优化建议'), (1, '烂!我想吐槽'), (2, '网站bug反馈')], default=0, verbose_name='反馈类型')),
                ('content', models.TextField(max_length=1024, verbose_name='反馈内容')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='反馈时间')),
            ],
            options={
                'verbose_name_plural': '208. 反馈表',
            },
        ),
        migrations.CreateModel(
            name='HomeworkRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.SmallIntegerField(blank=True, choices=[(100, 'A+'), (90, 'A'), (85, 'B+'), (80, 'B'), (70, 'B-'), (60, 'C+'), (50, 'C'), (40, 'C-'), (-1, 'D'), (0, 'N/A'), (-100, 'COPY')], null=True, verbose_name='分数')),
                ('mentor_comment', models.TextField(blank=True, null=True, verbose_name='导师批注')),
                ('status', models.SmallIntegerField(choices=[(0, '待批改'), (1, '已通过'), (2, '不合格')], default=0, verbose_name='作业状态')),
                ('submit_num', models.SmallIntegerField(default=0, verbose_name='提交次数')),
                ('correct_date', models.DateTimeField(blank=True, null=True, verbose_name='备注日期')),
                ('note', models.TextField(blank=True, null=True)),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='作业提交日期')),
                ('check_date', models.DateTimeField(blank=True, null=True, verbose_name='批改日期')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='提交日期')),
                ('reward_status', models.SmallIntegerField(default=0, verbose_name='作业记录奖惩状态')),
                ('homework', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='luffyapi.HomeWork')),
            ],
            options={
                'verbose_name_plural': '13. 作业',
            },
        ),
        migrations.CreateModel(
            name='Industry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.IntegerField(unique=True, verbose_name='行业代码')),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='行业名称')),
            ],
            options={
                'verbose_name_plural': '206. 行业表',
            },
        ),
        migrations.CreateModel(
            name='MentorGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='导师组名')),
                ('brief', models.TextField(blank=True, null=True, verbose_name='简介brief')),
            ],
            options={
                'verbose_name_plural': '14. 导师组',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_type', models.SmallIntegerField(choices=[(0, '微信'), (1, '支付宝'), (2, '优惠码'), (3, '贝里')])),
                ('payment_number', models.CharField(blank=True, max_length=128, null=True, verbose_name='支付第3方订单号')),
                ('order_number', models.CharField(max_length=128, unique=True, verbose_name='订单号')),
                ('actual_amount', models.FloatField(verbose_name='实付金额')),
                ('status', models.SmallIntegerField(choices=[(0, '交易成功'), (1, '待支付'), (2, '退费申请中'), (3, '已退费'), (4, '主动取消'), (5, '超时取消')], verbose_name='状态')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='订单生成时间')),
                ('pay_time', models.DateTimeField(blank=True, null=True, verbose_name='付款时间')),
                ('cancel_time', models.DateTimeField(blank=True, null=True, verbose_name='订单取消时间')),
            ],
            options={
                'verbose_name_plural': '70000001. 订单表',
            },
        ),
        migrations.CreateModel(
            name='OrderDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('original_price', models.FloatField(verbose_name='课程原价')),
                ('price', models.FloatField(verbose_name='折后价格')),
                ('content', models.CharField(blank=True, max_length=255, null=True)),
                ('valid_period_display', models.CharField(max_length=32, verbose_name='有效期显示')),
                ('valid_period', models.PositiveIntegerField(verbose_name='有效期(days)')),
                ('memo', models.CharField(blank=True, max_length=255, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='luffyapi.Order')),
            ],
            options={
                'verbose_name_plural': '70000002. 订单详细',
            },
        ),
        migrations.CreateModel(
            name='Profession',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.IntegerField(verbose_name='职业代码')),
                ('name', models.CharField(max_length=64, verbose_name='职业名称')),
                ('industry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='luffyapi.Industry', verbose_name='所属行业')),
            ],
            options={
                'verbose_name_plural': '207. 职业表',
            },
        ),
        migrations.CreateModel(
            name='Province',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.IntegerField(unique=True, verbose_name='省代码')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='省名称')),
            ],
            options={
                'verbose_name_plural': '204. 省份表',
            },
        ),
        migrations.CreateModel(
            name='QACounter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('data_type', models.SmallIntegerField(choices=[(0, '点赞'), (1, '踩'), (2, '同问')])),
                ('date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': '800000005. 问题和回答的赞同数量统计',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, db_index=True, max_length=128, null=True, verbose_name='问题概要')),
                ('question_type', models.SmallIntegerField(choices=[(0, '专题课程问题'), (1, '学位课程问题')], default=0, verbose_name='来源')),
                ('content', models.TextField(max_length=1024, verbose_name='问题内容')),
                ('enquiries_count', models.IntegerField(default=0, verbose_name='同问者计数')),
                ('attachment_path', models.CharField(blank=True, help_text='问题记录的截图等', max_length=128, null=True, verbose_name='附件路径')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('status', models.SmallIntegerField(choices=[(0, '待解答'), (1, '已解答'), (2, '已关闭')], default=0)),
            ],
            options={
                'verbose_name_plural': '800000002. 讨论区：课程提问',
            },
        ),
        migrations.CreateModel(
            name='ScoreRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('score', models.IntegerField(verbose_name='金额(贝里)')),
                ('received_score', models.IntegerField(default=0, help_text='仅奖励用', verbose_name='实际到账金额贝里)')),
                ('balance', models.PositiveIntegerField(verbose_name='奖金余额(贝里)')),
                ('maturity_date', models.DateField(verbose_name='成熟日期(可提现日期)')),
                ('applied', models.BooleanField(default=False, help_text='奖赏纪录是否已被执行', verbose_name='是否已被执行')),
                ('applied_date', models.DateTimeField(blank=True, null=True, verbose_name='事件生效日期')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='事件触发日期')),
                ('memo', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': '6000002. 奖惩记录',
            },
        ),
        migrations.CreateModel(
            name='ScoreRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rule', models.SmallIntegerField(choices=[(0, '未按时交作业'), (1, '未及时批改作业'), (2, '作业成绩'), (3, '未在规定时间内对学员进行跟进'), (4, '未在规定时间内回复学员问题'), (5, '收到学员投诉'), (6, '导师相关'), (7, '学位奖学金')], verbose_name='积分规则')),
                ('score_type', models.SmallIntegerField(choices=[(0, '奖励'), (1, '惩罚'), (2, '初始分配')], default=0, verbose_name='奖惩')),
                ('score', models.IntegerField(help_text='扣分数与贝里相等,若为0则代表规则的值可以从别处取得')),
                ('memo', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': '6000001. 奖惩规则',
            },
        ),
        migrations.CreateModel(
            name='StudyRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('open_date', models.DateField(blank=True, null=True, verbose_name='开通日期')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='完成日期')),
                ('status', models.SmallIntegerField(choices=[(2, '在学'), (1, '未开通'), (0, '已完成')], default=1)),
                ('course_module', models.ForeignKey(limit_choices_to={'course_type': 2}, on_delete=django.db.models.deletion.CASCADE, to='luffyapi.Course', verbose_name='学位模块')),
                ('enrolled_degree_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='luffyapi.EnrolledDegreeCourse')),
            ],
            options={
                'verbose_name_plural': '16. 学习记录表（报名学位课程后，每个模块会立刻生成一条学习纪录）',
            },
        ),
        migrations.CreateModel(
            name='StuFollowUpRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('followup_tool', models.SmallIntegerField(choices=[(0, 'QQ'), (1, '微信'), (2, '电话'), (3, '系统通知')], default=1)),
                ('record', models.TextField(verbose_name='跟进记录')),
                ('attachment_path', models.CharField(blank=True, help_text='跟进记录的截图等', max_length=128, null=True, verbose_name='附件路径')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('enrolled_degree_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='luffyapi.EnrolledDegreeCourse', verbose_name='学生')),
            ],
            options={
                'verbose_name_plural': '800000001. 学员跟进记录',
            },
        ),
        migrations.CreateModel(
            name='TransactionRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.IntegerField(verbose_name='金额')),
                ('transaction_type', models.SmallIntegerField(choices=[(0, '收入'), (1, '支出'), (2, '退款'), (3, '提现')])),
                ('object_id', models.PositiveIntegerField(blank=True, null=True, verbose_name='关联对象')),
                ('transaction_number', models.CharField(max_length=128, unique=True, verbose_name='流水号')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('memo', models.CharField(blank=True, max_length=128, null=True)),
            ],
            options={
                'verbose_name_plural': '70000003. 贝里交易记录',
            },
        ),
        migrations.AlterModelOptions(
            name='pricepolicy',
            options={'verbose_name_plural': '20. 价格策略表'},
        ),
        migrations.AddField(
            model_name='account',
            name='balance',
            field=models.PositiveIntegerField(default=0, verbose_name='可提现和使用余额'),
        ),
        migrations.AddField(
            model_name='account',
            name='birthday',
            field=models.DateField(blank=True, null=True, verbose_name='生日'),
        ),
        migrations.AddField(
            model_name='account',
            name='brief',
            field=models.TextField(blank=True, null=True, verbose_name='个人介绍'),
        ),
        migrations.AddField(
            model_name='account',
            name='date_joined',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='注册时间'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='account',
            name='degree',
            field=models.PositiveSmallIntegerField(blank=True, choices=[(0, '学历'), (1, '高中以下'), (2, '中专／高中'), (3, '大专'), (4, '本科'), (5, '硕士'), (6, '博士')], default=0, null=True, verbose_name='学历'),
        ),
        migrations.AddField(
            model_name='account',
            name='email',
            field=models.EmailField(blank=True, max_length=255, null=True, unique=True, verbose_name='email address'),
        ),
        migrations.AddField(
            model_name='account',
            name='gender',
            field=models.SmallIntegerField(choices=[(0, '保密'), (1, '男'), (2, '女')], default=0, verbose_name='性别'),
        ),
        migrations.AddField(
            model_name='account',
            name='head_img',
            field=models.CharField(default='/static/frontend/head_portrait/logo@2x.png', max_length=128, verbose_name='个人头像'),
        ),
        migrations.AddField(
            model_name='account',
            name='id_card',
            field=models.CharField(blank=True, max_length=32, null=True, verbose_name='身份证号或护照号'),
        ),
        migrations.AddField(
            model_name='account',
            name='is_active',
            field=models.BooleanField(default=True, verbose_name='账户状态'),
        ),
        migrations.AddField(
            model_name='account',
            name='is_staff',
            field=models.BooleanField(default=False, help_text='决定着用户是否可登录管理后台', verbose_name='staff status'),
        ),
        migrations.AddField(
            model_name='account',
            name='memo',
            field=models.TextField(blank=True, default=None, null=True, verbose_name='备注'),
        ),
        migrations.AddField(
            model_name='account',
            name='mobile',
            field=models.BigIntegerField(default=111111111111, help_text='用于手机验证码登录', unique=True, verbose_name='手机'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='account',
            name='name',
            field=models.CharField(default='', max_length=32, verbose_name='真实姓名'),
        ),
        migrations.AddField(
            model_name='account',
            name='qq',
            field=models.CharField(blank=True, db_index=True, max_length=64, null=True, verbose_name='QQ'),
        ),
        migrations.AddField(
            model_name='account',
            name='role',
            field=models.SmallIntegerField(choices=[(0, '学生'), (1, '导师'), (2, '讲师'), (3, '管理员')], default=0, verbose_name='角色'),
        ),
        migrations.AddField(
            model_name='account',
            name='signature',
            field=models.CharField(blank=True, max_length=255, null=True, verbose_name='个人签名'),
        ),
        migrations.AddField(
            model_name='account',
            name='tags',
            field=models.ManyToManyField(blank=True, to='luffyapi.Tags', verbose_name='感兴趣的标签'),
        ),
        migrations.AddField(
            model_name='account',
            name='uid',
            field=models.CharField(default=django.utils.timezone.now, help_text='用户名的md5值,不用填写', max_length=255, unique=True, verbose_name='唯一ID'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='account',
            name='weixin',
            field=models.CharField(blank=True, db_index=True, max_length=128, null=True, verbose_name='微信'),
        ),
        migrations.AddField(
            model_name='account',
            name='wx_openid',
            field=models.CharField(blank=True, db_index=True, max_length=128, null=True, verbose_name='微信openid'),
        ),
        migrations.AddField(
            model_name='transactionrecord',
            name='account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='luffyapi.Account'),
        ),
        migrations.AddField(
            model_name='transactionrecord',
            name='content_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='stufollowuprecord',
            name='mentor',
            field=models.ForeignKey(limit_choices_to={'role': 1}, on_delete=django.db.models.deletion.CASCADE, related_name='mentor', to='luffyapi.Account', verbose_name='导师'),
        ),
        migrations.AlterUniqueTogether(
            name='scorerule',
            unique_together={('rule', 'score_type')},
        ),
        migrations.AddField(
            model_name='scorerecord',
            name='account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='luffyapi.Account', verbose_name='被执行人'),
        ),
        migrations.AddField(
            model_name='scorerecord',
            name='content_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='scorerecord',
            name='degree_course',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='luffyapi.DegreeCourse', verbose_name='关联学位课程'),
        ),
        migrations.AddField(
            model_name='scorerecord',
            name='score_rule',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='luffyapi.ScoreRule', verbose_name='关联规则'),
        ),
        migrations.AddField(
            model_name='question',
            name='account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='luffyapi.Account', verbose_name='提问者'),
        ),
        migrations.AddField(
            model_name='question',
            name='course_section',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='luffyapi.CourseSection'),
        ),
        migrations.AddField(
            model_name='question',
            name='degree_course',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='luffyapi.DegreeCourse'),
        ),
        migrations.AddField(
            model_name='qacounter',
            name='account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='luffyapi.Account'),
        ),
        migrations.AddField(
            model_name='qacounter',
            name='content_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='order',
            name='account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='luffyapi.Account', verbose_name='账号'),
        ),
        migrations.AddField(
            model_name='mentorgroup',
            name='mentors',
            field=models.ManyToManyField(limit_choices_to={'role': 1}, to='luffyapi.Account', verbose_name='组员'),
        ),
        migrations.AddField(
            model_name='homeworkrecord',
            name='mentor',
            field=models.ForeignKey(limit_choices_to={'role': 1}, on_delete=django.db.models.deletion.CASCADE, related_name='my_stu_homework_record', to='luffyapi.Account', verbose_name='导师'),
        ),
        migrations.AddField(
            model_name='homeworkrecord',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='luffyapi.EnrolledDegreeCourse', verbose_name='学生'),
        ),
        migrations.AddField(
            model_name='enrolleddegreecourse',
            name='account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='luffyapi.Account'),
        ),
        migrations.AddField(
            model_name='enrolleddegreecourse',
            name='degree_course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='luffyapi.DegreeCourse'),
        ),
        migrations.AddField(
            model_name='enrolleddegreecourse',
            name='mentor',
            field=models.ForeignKey(blank=True, limit_choices_to={'role': 1}, null=True, on_delete='', related_name='my_students', to='luffyapi.Account', verbose_name='导师'),
        ),
        migrations.AddField(
            model_name='enrolleddegreecourse',
            name='order_detail',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='luffyapi.OrderDetail'),
        ),
        migrations.AddField(
            model_name='enrolledcourse',
            name='account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='luffyapi.Account'),
        ),
        migrations.AddField(
            model_name='enrolledcourse',
            name='course',
            field=models.ForeignKey(limit_choices_to=models.Q(_negated=True, course_type=2), on_delete=django.db.models.deletion.CASCADE, to='luffyapi.Course'),
        ),
        migrations.AddField(
            model_name='enrolledcourse',
            name='order_detail',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='luffyapi.OrderDetail'),
        ),
        migrations.AddField(
            model_name='degreeregistrationform',
            name='enrolled_degree',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='luffyapi.EnrolledDegreeCourse'),
        ),
        migrations.AddField(
            model_name='courseschedule',
            name='study_record',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='luffyapi.StudyRecord'),
        ),
        migrations.AddField(
            model_name='couponrecord',
            name='order',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='luffyapi.Order', verbose_name='使用的订单'),
        ),
        migrations.AddField(
            model_name='city',
            name='province',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='luffyapi.Province', verbose_name='省份'),
        ),
        migrations.AddField(
            model_name='answercomment',
            name='account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='luffyapi.Account', verbose_name='评论者'),
        ),
        migrations.AddField(
            model_name='answercomment',
            name='answer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='luffyapi.Answer'),
        ),
        migrations.AddField(
            model_name='answercomment',
            name='reply_to',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='luffyapi.AnswerComment', verbose_name='基于评论的评论'),
        ),
        migrations.AddField(
            model_name='answer',
            name='account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='luffyapi.Account', verbose_name='回答者'),
        ),
        migrations.AddField(
            model_name='answer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='luffyapi.Question', verbose_name='问题'),
        ),
        migrations.AddField(
            model_name='account',
            name='city',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='luffyapi.City', verbose_name='城市'),
        ),
        migrations.AddField(
            model_name='account',
            name='profession',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='luffyapi.Profession', verbose_name='职位信息'),
        ),
        migrations.AlterUniqueTogether(
            name='studyrecord',
            unique_together={('enrolled_degree_course', 'course_module')},
        ),
        migrations.AlterUniqueTogether(
            name='qacounter',
            unique_together={('content_type', 'object_id', 'account')},
        ),
        migrations.AlterUniqueTogether(
            name='orderdetail',
            unique_together={('order', 'content_type', 'object_id')},
        ),
        migrations.AlterUniqueTogether(
            name='homeworkrecord',
            unique_together={('homework', 'student')},
        ),
        migrations.AlterUniqueTogether(
            name='enrolleddegreecourse',
            unique_together={('account', 'degree_course')},
        ),
        migrations.AlterUniqueTogether(
            name='courseschedule',
            unique_together={('study_record', 'homework')},
        ),
    ]
